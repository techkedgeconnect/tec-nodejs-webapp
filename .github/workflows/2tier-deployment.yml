name: CI/CD for 2-Tier Microservice Web App

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - tec-2tier-microservices-deployment
    paths-ignore:
      - 'dev-ecr-repo/**'
      - 'modules/**'
      - 'k8s/**'
      - 'README.md'
      - '2-tier-microservices-app-deployment-guide-using-helm.md'
      - 'docker-compose.yml'
      - 'step-by-step-guide-using-docker-compose-to-deploy.md'
      - 'two-tier-microservices-overview.md'


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      # Step 4: Build and Push Backend Image with github.run_id as Tag
      - name: Build and Push Backend Image
        run: |
          docker build -t backend-service ./backend
          docker tag backend-service:latest ${{ secrets.ECR_REGISTRY }}/backend-service:${{ github.run_id }}
          docker push ${{ secrets.ECR_REGISTRY }}/backend-service:${{ github.run_id }}

      # Step 5: Build and Push Frontend Image with github.run_id as Tag
      - name: Build and Push Frontend Image
        run: |
          docker build -t frontend-service ./frontend
          docker tag frontend-service:latest ${{ secrets.ECR_REGISTRY }}/frontend-service:${{ github.run_id }}
          docker push ${{ secrets.ECR_REGISTRY }}/frontend-service:${{ github.run_id }}

      # Step 6: Create Image Pull Secret in Kubernetes
      - name: Create Image Pull Secret
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          sudo kubectl create secret docker-registry ecr-pull-secret \
          --namespace tec-web-app \
          --docker-server=${{ secrets.ECR_REGISTRY }} \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region $AWS_REGION) \
          --dry-run=client -o yaml | kubectl apply -f -

      # Step 7: Update Helm Values and Deploy
      - name: Update Helm Chart with new Image Tags
        run: |
          helm upgrade --install tec-web-app ./helm/tec-web-app \
            --namespace tec-web-app \
            --set image.backendTag=${{ github.run_id }} \
            --set image.frontendTag=${{ github.run_id }}

